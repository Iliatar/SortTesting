/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.example.dataProvider.DataProvider;
import org.example.dataProvider.FragmentedIntegerDataProvider;
import org.example.outputGenerators.BasicOutputGenerator;
import org.example.outputGenerators.OutputGenerator;
import org.example.outputUnit.ConsoleOutputUnit;
import org.example.outputUnit.OutputUnit;
import org.example.outputUnit.TextFileOutputUnit;
import org.example.sorterUnit.BenchmarkIntegerSorter;
import org.example.sorterUnit.SorterUnit;
import org.example.testUnit.TestUnit;
import org.example.utils.SorterClassLoader;
import picocli.CommandLine;
import picocli.CommandLine.Option;
import picocli.CommandLine.Command;
import picocli.CommandLine.Parameters;

@Command(
        name = "test",
        description = "Test sorter unit benchmark"
)
public class App implements Runnable {
    @Parameters(index = "0", arity = "1",
                    description = "Full name of class, which will be tested. " +
                    "Class must have no args constructor and implements SorterUnit interface")
    private String sorterUnitClassName;

    @Parameters(index = "1", arity = "1",
                description = "File path if class, which will be tested (i.e. '../testedSorter.class').")
    private String sorterUnitFilePath;

    @Option(names = {"-i", "--iterations"}, description = "Test iterations count",
            defaultValue = "5000", showDefaultValue = CommandLine.Help.Visibility.ALWAYS)
    private Integer iterationsCount;

    @Option(names = {"-l", "--dataLength"}, description = "Test data size",
            defaultValue = "8000", showDefaultValue = CommandLine.Help.Visibility.ALWAYS)
    private Integer dataLength;

    @Option(names = {"-f", "--fileOutput"}, description = "Output to file flag")
    private boolean fileOutput;

    @Option(names = {"-d", "--dataProvider"}, description = "Name of class, which will be used as data provider. " +
            "Class must have no args constructor and implements DataProvider interface",
            defaultValue = "org.example.dataProvider.SimpleIntegerDataProvider",
            showDefaultValue = CommandLine.Help.Visibility.ALWAYS)
    private String dataProviderClassName = "org.example.dataProvider.SimpleIntegerDataProvider";

    public static void main(String[] args) {
        int exitCode = new CommandLine(new App()).execute(args);
        System.exit(exitCode);
    }

    @Override
    public void run() {
        SorterUnit<Integer> sorterUnit = null;
        DataProvider<Integer> dataProvider = null;

        try {
            SorterClassLoader sorterClassLoader = new SorterClassLoader();
            Class<?> sorterUnitClass = sorterClassLoader.findClass(sorterUnitClassName, sorterUnitFilePath);
            sorterUnit = (SorterUnit<Integer>) sorterUnitClass.getDeclaredConstructor().newInstance();
        } catch (NoSuchMethodException e) {
            throw new RuntimeException("Class with name " + sorterUnitClassName + " not found don't have no args constructor");
        } catch (Exception e) {
            throw new RuntimeException("Exception happened: " + e.getMessage());
        }

        try {
            dataProvider = (DataProvider<Integer>) Class.forName(dataProviderClassName)
                    .getDeclaredConstructor().newInstance();
        } catch (ClassNotFoundException e) {
            throw new RuntimeException("Class with name " + dataProviderClassName + " not found");
        } catch (NoSuchMethodException e) {
            throw new RuntimeException("Class with name " + dataProviderClassName + " don't have no args constructor");
        } catch (Exception e) {
            throw new RuntimeException("Exception happened: " + e.getMessage());
        }

        SorterUnit<Integer> benchmarkSorter = new BenchmarkIntegerSorter();

        var testUnit = new TestUnit<>(sorterUnit, benchmarkSorter,
                dataProvider, dataLength, iterationsCount);
        testUnit.test();

        if (!testUnit.isComplete()) return;

        OutputGenerator basicOutputGenerator = new BasicOutputGenerator();
        OutputUnit outputUnit = fileOutput
                ? new TextFileOutputUnit(basicOutputGenerator, testUnit)
                : new ConsoleOutputUnit(basicOutputGenerator, testUnit);
        outputUnit.writeOutput();
    }
}
